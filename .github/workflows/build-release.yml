name: Build and Release PI USB Data Safegate

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

env:
  PACKAGE_NAME: pi-usb-safegate

jobs:
  validate:
    name: Validate Version and Dependencies
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      package_file: ${{ steps.version.outputs.package_file }}
      app_title: ${{ steps.version.outputs.app_title }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f src/pi_usb_safegate/requirements.txt ]; then
            pip install -r src/pi_usb_safegate/requirements.txt
          fi
      
      - name: Extract Version Information
        id: version
        run: |
          VERSION=$(python3 src/pi_usb_safegate/version.py version)
          PACKAGE_FILE=$(python3 src/pi_usb_safegate/version.py package)
          APP_TITLE=$(python3 -c "import sys; sys.path.insert(0, 'src/pi_usb_safegate'); from version import get_app_title; print(get_app_title())")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package_file=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "app_title=$APP_TITLE" >> $GITHUB_OUTPUT
          
          echo "Detected version: $VERSION"
          echo "Package file: $PACKAGE_FILE"
          echo "App title: $APP_TITLE"
      
      - name: Validate Version Format
        run: |
          python3 -c "
          import sys
          sys.path.insert(0, 'src/pi_usb_safegate')
          from version import parse_version
          try:
              parse_version('${{ steps.version.outputs.version }}')
              print('✓ Version format is valid')
          except ValueError as e:
              print(f'✗ Invalid version format: {e}')
              exit(1)
          "
      
      - name: Check if Release Already Exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if tag exists
          if git tag -l | grep -q "^v${VERSION}$"; then
            echo "✗ Tag v${VERSION} already exists"
            exit 1
          fi
          
          # Check if release exists via GitHub API
          RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${VERSION}" | \
            jq -r '.tag_name // "null"')
          
          if [ "$RELEASE_EXISTS" != "null" ]; then
            echo "✗ Release v${VERSION} already exists"
            exit 1
          fi
          
          echo "✓ Version ${VERSION} is available for release"

  build:
    name: Build Debian Package
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            dpkg-dev \
            lintian \
            fakeroot \
            build-essential
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f src/pi_usb_safegate/requirements.txt ]; then
            pip install -r src/pi_usb_safegate/requirements.txt
          fi
      
      - name: Validate Build Environment
        run: |
          echo "Build Environment Information:"
          echo "OS: $(lsb_release -d | cut -f2)"
          echo "Python: $(python3 --version)"
          echo "Package Version: ${{ needs.validate.outputs.version }}"
          echo "Package File: ${{ needs.validate.outputs.package_file }}"
          
          # Test version extraction
          make version
          make filename
      
      - name: Build Debian Package
        run: |
          echo "Building package for version ${{ needs.validate.outputs.version }}"
          
          # Make build script executable
          chmod +x scripts/build-package.sh
          
          # Build the package
          ./scripts/build-package.sh
          
          # Verify package was created
          if [ ! -f "${{ needs.validate.outputs.package_file }}" ]; then
            echo "✗ Package file not found: ${{ needs.validate.outputs.package_file }}"
            exit 1
          fi
          
          echo "✓ Package built successfully"
      
      - name: Test Package Installation
        run: |
          # Test package info
          echo "Package Information:"
          dpkg-deb --info "${{ needs.validate.outputs.package_file }}"
          
          echo -e "\nPackage Contents:"
          dpkg-deb --contents "${{ needs.validate.outputs.package_file }}"
          
          # Test package structure
          echo -e "\nValidating package structure..."
          dpkg-deb --extract "${{ needs.validate.outputs.package_file }}" test-install/
          
          # Check critical files
          if [ ! -f "test-install/usr/share/pi-usb-safegate/daemon.py" ]; then
            echo "✗ Missing daemon.py"
            exit 1
          fi
          
          if [ ! -f "test-install/etc/systemd/system/pi-usb-safegate.service" ]; then
            echo "✗ Missing systemd service file"
            exit 1
          fi
          
          echo "✓ Package structure validated"
      
      - name: Run Lintian Checks
        run: |
          echo "Running lintian package checks..."
          lintian "${{ needs.validate.outputs.package_file }}" || {
            echo "⚠️ Lintian found issues (may not be critical)"
          }
      
      - name: Generate Package Checksums
        run: |
          # Generate checksums
          sha256sum "${{ needs.validate.outputs.package_file }}" > "${{ needs.validate.outputs.package_file }}.sha256"
          md5sum "${{ needs.validate.outputs.package_file }}" > "${{ needs.validate.outputs.package_file }}.md5"
          
          echo "Package Checksums:"
          cat "${{ needs.validate.outputs.package_file }}.sha256"
          cat "${{ needs.validate.outputs.package_file }}.md5"
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: |
            ${{ needs.validate.outputs.package_file }}
            ${{ needs.validate.outputs.package_file }}.sha256
            ${{ needs.validate.outputs.package_file }}.md5
          retention-days: 30

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: debian-package
          path: ./artifacts/
      
      - name: Prepare Release Notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          # ${{ needs.validate.outputs.app_title }}
          
          ## 🚀 What's New
          
          This release includes the latest improvements and bug fixes for the PI USB Data Safegate application.
          
          ## 📦 Installation
          
          ### Quick Installation
          \`\`\`bash
          # Download and install the package
          wget https://github.com/${{ github.repository }}/releases/download/v${VERSION}/${{ needs.validate.outputs.package_file }}
          sudo dpkg -i ${{ needs.validate.outputs.package_file }}
          
          # Fix any dependency issues
          sudo apt --fix-broken install
          
          # Configure the application
          sudo pi-usb-safegate-setup
          
          # Start the service
          sudo systemctl start pi-usb-safegate
          \`\`\`
          
          ### Verification
          Verify the package integrity using the provided checksums:
          \`\`\`bash
          # SHA256
          sha256sum -c ${{ needs.validate.outputs.package_file }}.sha256
          
          # MD5
          md5sum -c ${{ needs.validate.outputs.package_file }}.md5
          \`\`\`
          
          ## 🔧 System Requirements
          
          - Raspberry Pi OS (Bullseye or newer) or Debian/Ubuntu
          - Python 3.7+
          - ClamAV antivirus software
          - Nextcloud server access
          - Email server access (SMTP)
          
          ## 📚 Documentation
          
          Complete documentation is available in the \`_docs/\` folder:
          - [Installation Guide](_docs/README.md)
          - [Configuration](_docs/CONFIG.md)
          - [Usage Guide](_docs/USAGE.md)
          - [Troubleshooting](_docs/TROUBLESHOOTING.md)
          
          ## 🛡️ Security
          
          This application provides secure USB-to-cloud file transfer with:
          - Malware scanning using ClamAV
          - Encrypted cloud transfers (HTTPS)
          - Automatic file cleanup
          - Email notifications
          
          ## 🐛 Issues & Support
          
          If you encounter any issues, please check the [troubleshooting guide](_docs/TROUBLESHOOTING.md) or create an issue on GitHub.
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: Create Git Tag
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create and push tag
          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          release_name: ${{ needs.validate.outputs.app_title }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
      
      - name: Upload Debian Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ needs.validate.outputs.package_file }}
          asset_name: ${{ needs.validate.outputs.package_file }}
          asset_content_type: application/vnd.debian.binary-package
      
      - name: Upload SHA256 Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ needs.validate.outputs.package_file }}.sha256
          asset_name: ${{ needs.validate.outputs.package_file }}.sha256
          asset_content_type: text/plain
      
      - name: Upload MD5 Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ needs.validate.outputs.package_file }}.md5
          asset_name: ${{ needs.validate.outputs.package_file }}.md5
          asset_content_type: text/plain
      
      - name: Release Summary
        run: |
          echo "🎉 Release created successfully!"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Package: ${{ needs.validate.outputs.package_file }}"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
          
          # Add to job summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🎉 Release Complete
          
          **Version:** ${{ needs.validate.outputs.version }}
          **Package:** ${{ needs.validate.outputs.package_file }}
          **Release:** [${{ needs.validate.outputs.app_title }}](${{ steps.create_release.outputs.html_url }})
          
          ## 📦 Assets
          - Debian Package (.deb)
          - SHA256 Checksum
          - MD5 Checksum
          
          ## 🚀 Next Steps
          1. Test the release package
          2. Update documentation if needed
          3. Announce the release to users
          EOF

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, build, release]
    if: always()
    
    steps:
      - name: Workflow Status Summary
        run: |
          echo "Workflow completed with the following status:"
          echo "Validation: ${{ needs.validate.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Release: ${{ needs.release.result }}"
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "✅ Release ${{ needs.validate.outputs.version }} created successfully"
          else
            echo "❌ Release process failed"
            exit 1
          fi